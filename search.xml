<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title></title>
    <url>%2Funcategorized%2F%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90-pandas%2F</url>
    <content type="text"><![CDATA[pandas数据处理1、删除重复元素使用duplicated()函数检测重复的行，返回元素为布尔类型的Series对象，每个元素对应一行，如果该行不是第一次出现，则元素为True（是重复的） 使用drop_duplicates()函数删除重复的行 使用duplicate()函数查看重复的行 In [1]: 123import numpy as npimport pandas as pdfrom pandas import Series,DataFrame In [408]: 12345data = [[100,100,100],[90,90,88],[100,100,100],[90,90,87],[100,100,100]]columns = [&apos;python&apos;,&apos;c++&apos;,&apos;java&apos;]index = list(&apos;ABCDE&apos;)df = DataFrame(data=data,index=index,columns=columns)df Out[408]: python c++ java A 100 100 100 B 90 90 88 C 100 100 100 D 90 90 87 E 100 100 100 In [410]: 123df.duplicated(keep=&quot;first&quot;) # 告诉我们 当前行是否重复# 参数默认是 keep=&quot;first&quot; 如果发现很多重复的元素 第一个不算重复的 后面的才是# 某一行重复 就返回True Out[410]: 123456A FalseB FalseC TrueD FalseE Truedtype: bool In [411]: 12df.duplicated(keep=&quot;last&quot;) # keep last 如果遇到重复的元素 最后一个不算重复的 前面的才算重复# 这一行重复了 就是True Out[411]: 123456A TrueB FalseC TrueD FalseE Falsedtype: bool In [413]: 12df.duplicated(keep=False) # 只要有和别人完全一样的 不管在开头还是结尾 都算重复# 这一行如果是重复的就返回 True Out[413]: 123456A TrueB FalseC TrueD FalseE Truedtype: bool In [415]: 1df Out[415]: python c++ java A 100 100 100 B 90 90 88 C 100 100 100 D 90 90 87 E 100 100 100 In [419]: 1234df.drop_duplicates() # &#123;&apos;first&apos;, &apos;last&apos;, False&#125;, default &apos;first&apos;df.drop_duplicates(keep=&quot;first&quot;) # 默认就是keep firstdf.drop_duplicates(keep=&quot;last&quot;) df.drop_duplicates(keep=False) Out[419]: python c++ java B 90 90 88 D 90 90 87 2. 映射映射的含义：创建一个映射关系列表，把values元素和一个特定的标签或者字符串绑定 包含三种操作： replace()函数：替换元素 最重要：map()函数：新建一列 rename()函数：替换索引 1) replace()函数：替换元素使用replace()函数，对values进行替换操作 Series替换操作 单值替换 普通替换 字典替换(推荐） 多值替换 列表替换 字典替换（推荐） In [421]: 12s1 = Series(data = [100,&apos;peppa&apos;,np.nan,&apos;chengdu&apos;])s1 Out[421]: 123450 1001 peppa2 NaN3 chengdudtype: object In [422]: 12# 单值替换 普通替换s1.replace(to_replace=&quot;peppa&quot;,value=&quot;佩琪&quot;) Out[422]: 123450 1001 佩琪2 NaN3 chengdudtype: object In [423]: 12# 单值替换 字典替换（ ）s1.replace(&#123;&quot;chengdu&quot;:&quot;成都&quot;&#125;) Out[423]: 123450 1001 peppa2 NaN3 成都dtype: object In [425]: 12# 多值替换 列表替换 s1.replace([要替换的值1,要替换的值2,.....],[替换成什么1,替换成什么2,....])s1.replace([100,np.nan],[&quot;满分&quot;,&quot;空值&quot;]) Out[425]: 123450 满分1 peppa2 空值3 chengdudtype: object In [426]: 1s1 Out[426]: 123450 1001 peppa2 NaN3 chengdudtype: object In [427]: 12# 多值替换 字典替换（ &#123; 要替换的值:替换成什么,要替换的值:替换成什么 &#125; ）s1.replace(&#123;100:&quot;满分&quot;,&quot;peppa&quot;:&quot;佩琪&quot;&#125;) Out[427]: 123450 满分1 佩琪2 NaN3 chengdudtype: object . . . Series参数说明： method：对指定的值使用相邻的值填充 limit：设定填充次数 In [428]: 12s2 = Series(data=np.array([80,100,100,100,89,78]))s2 Out[428]: 12345670 801 1002 1003 1004 895 78dtype: int32 In [431]: 1234# 如果指定value不好 还可以找值来填充s2.replace(to_replace=100,method=&quot;bfill&quot;) # 从后面找值来替换当前值s2.replace(to_replace=100,method=&quot;ffill&quot;) # 从前面找s2.replace(to_replace=100,method=&quot;ffill&quot;,limit=1) # limit 指定是最多往前或者往后 找几个 如果找不到就不填充了 # limit 默认是None不限制 Out[431]: 12345670 801 802 1003 1004 895 78dtype: int32 DataFrame替换操作 单值替换 普通替换 按列指定单值替换{列标签：目标值} 多值替换 列表替换 单字典替换（推荐） In [437]: 12df = pd.read_excel(&quot;../data/data.xls&quot;,sheet_name=0)df Out[437]: 0 1 2 3 4 A 甲 NaN NaN NaN Beijing B 乙 69.0 142.0 29 Beijing C 丙 111.0 7.0 2 Beijing D 丁 139.0 19.0 125 shanghai E 戊 12.0 66.0 Beijing shanghai In [434]: 12# 普通的单值替换df.replace(to_replace=&apos;Beijing&apos;,value=&apos;北京&apos;) Out[434]: 0 1 2 3 4 A 甲 NaN NaN NaN 北京 B 乙 69.0 142.0 29 北京 C 丙 111.0 7.0 2 北京 D 丁 139.0 19.0 125 shanghai E 戊 12.0 66.0 北京 shanghai In [435]: 1df Out[435]: 0 1 2 3 4 A 甲 NaN NaN NaN Beijing B 乙 69.0 142.0 29 Beijing C 丙 111.0 7.0 2 Beijing D 丁 139.0 19.0 125 shanghai E 戊 12.0 66.0 北京 shanghai In [438]: 12# 按列指定单值换目标值 (&#123;列索引,待替换值&#125;,目标值)df.replace(&#123;4:&apos;Beijing&apos;&#125;,&apos;首都&apos;) Out[438]: 0 1 2 3 4 A 甲 NaN NaN NaN 首都 B 乙 69.0 142.0 29 首都 C 丙 111.0 7.0 2 首都 D 丁 139.0 19.0 125 shanghai E 戊 12.0 66.0 Beijing shanghai In [439]: 1df Out[439]: 0 1 2 3 4 A 甲 NaN NaN NaN Beijing B 乙 69.0 142.0 29 Beijing C 丙 111.0 7.0 2 Beijing D 丁 139.0 19.0 125 shanghai E 戊 12.0 66.0 Beijing shanghai In [274]: 123# 多值替换 列表进替换# replace([要替换的1，要替换的2...],[替换成1，替换成2])df.replace([66,&apos;甲&apos;,&apos;shanghai&apos;],[100,&apos;first&apos;,&apos;上海&apos;]) Out[274]: 0 1 2 3 4 A first NaN NaN NaN Beijing B 乙 69.0 142.0 29 Beijing C 丙 111.0 7.0 2 Beijing D 丁 139.0 19.0 125 上海 E 戊 12.0 100.0 北京 上海 In [441]: 1df Out[441]: 0 1 2 3 4 A 甲 NaN NaN NaN Beijing B 乙 69.0 142.0 29 Beijing C 丙 111.0 7.0 2 Beijing D 丁 139.0 19.0 125 shanghai E 戊 12.0 66.0 Beijing shanghai In [440]: 123# replace(&#123;要替换的1：替换成的值1，要替换的2：替换成的值2，...&#125;) 可以将没有的值也放在这里 不会报错 将来可以整个项目使用一个过滤器df.replace(&#123;66:100,&apos;乙&apos;:&apos;second&apos;,&apos;Beijing&apos;:&apos;BEIJING&apos;,&apos;没有的值&apos;:&apos;也可以放&apos;&#125;)# 我们可以在 字典里面写很多值 字典中的值即使找不到也不会报错 Out[440]: 0 1 2 3 4 A 甲 NaN NaN NaN BEIJING B second 69.0 142.0 29 BEIJING C 丙 111.0 7.0 2 BEIJING D 丁 139.0 19.0 125 shanghai E 戊 12.0 100.0 BEIJING shanghai 注意：DataFrame中，无法使用method和limit参数 ============================================ 练习19： 假设张三李四的成绩单里有满分的情况，老师认为是作弊，把所有满分的情况（包括150,300分）都记0分，如何实现？ ============================================ In [443]: 12345data = [[150,300],[150,300]]index = [&quot;张三&quot;,&quot;李四&quot;]columns = [&quot;数学&quot;,&quot;理综&quot;]df = DataFrame(data,index,columns)df Out[443]: 数学 理综 张三 150 300 李四 150 300 In [453]: 12345678# 替换多个# df.replace(&#123;150:0,300:0&#125;)# df.replace([150,300],[0,0])# 单值替换# df1 = df.replace(to_replace=150,value=0)# df1.replace(to_replace=300,value=0)# df1 = df.replace(&#123;&quot;数学&quot;:150&#125;,0)# df1.replace(&#123;&quot;理综&quot;:300&#125;,0) Out[453]: 数学 理综 张三 0 0 李四 0 0 2) map()函数：新建一列 map(字典) 字典的键要足以匹配所有的数据，否则出现NaN map()可以映射新一列数据 map()中可以使用lambd表达式 map()中可以使用方法，可以是自定义的方法 注意 map()中不能使用sum之类的函数，for循环 In [454]: 12score = pd.read_excel(&apos;../data/data.xls&apos;,sheet_name=1)score Out[454]: 姓名 语文 数学 python php 0 小明 90 98 90 98 1 小红 44 89 44 89 2 小芳 98 90 90 98 3 小李 89 44 44 89 4 李元芳 78 98 98 87 5 狄仁杰 66 44 44 89 In [456]: 123# 映射字典map_dic = &#123;&apos;小明&apos;:&apos;北京&apos;,&apos;小红&apos;:&apos;上海&apos;,&apos;小芳&apos;:&apos;北京&apos;, &apos;小李&apos;:&apos;广州&apos;,&apos;李元芳&apos;:&apos;成都&apos;,&apos;狄仁杰&apos;:&apos;成都&apos;&#125; In [458]: 1score[&quot;姓名&quot;] Out[458]: 12345670 小明1 小红2 小芳3 小李4 李元芳5 狄仁杰Name: 姓名, dtype: object In [459]: 123# map函数不是DataFrame的方法，而是Sereis对象的方法# 可以传入映射字典score[&quot;姓名&quot;].map(map_dic) Out[459]: 12345670 北京1 上海2 北京3 广州4 成都5 成都Name: 姓名, dtype: object In [461]: 12score[&quot;所在城市&quot;] = score[&quot;姓名&quot;].map(map_dic) # 可以传入字典score Out[461]: 姓名 语文 数学 python php 所在城市 0 小明 90 98 90 98 北京 1 小红 44 89 44 89 上海 2 小芳 98 90 90 98 北京 3 小李 89 44 44 89 广州 4 李元芳 78 98 98 87 成都 5 狄仁杰 66 44 44 89 成都 In [466]: 12# 还可以传入 拉姆达表达式 如 lambda x:x+10score[&quot;python&quot;]= score[&quot;python&quot;].map(lambda x:x+10) In [467]: 1score Out[467]: 姓名 语文 数学 python php 所在城市 0 小明 90 98 100 98 北京 1 小红 44 89 54 89 上海 2 小芳 98 90 100 98 北京 3 小李 89 44 54 89 广州 4 李元芳 78 98 108 87 成都 5 狄仁杰 66 44 54 89 成都 In [468]: 123# 还可以传入自定义函数def fn(x): return x-20 In [472]: 1score[&quot;php&quot;]= score[&quot;php&quot;].map(fn) #这里一定要注意 是把函数名传入 千万不要加小括号去调用 1score Out[472]: 姓名 语文 数学 python php 所在城市 0 小明 90 98 100 18 北京 1 小红 44 89 54 9 上海 2 小芳 98 90 100 18 北京 3 小李 89 44 54 9 广州 4 李元芳 78 98 108 7 成都 5 狄仁杰 66 44 54 9 成都 ============================================ 练习20： 123给已有的考试成绩表新增一列成绩状态，如果分数低于90，则为&quot;failed&quot;，如果分数高于120，则为&quot;excellent&quot;，其他则为&quot;pass&quot;【提示】使用函数作为map的参数 ============================================ In [484]: 12345data = np.random.randint(0,150,size=(5,3))columns = [&apos;python&apos;,&apos;java&apos;,&apos;php&apos;]index = [&apos;peppa&apos;,&apos;mery&apos;,&apos;tom&apos;,&apos;jack&apos;,&apos;rose&apos;]df = DataFrame(data,index,columns)df Out[484]: python java php peppa 18 57 95 mery 29 4 142 tom 102 138 59 jack 138 130 79 rose 68 137 69 In [479]: 1234567def map_score(x): if x&gt;120: return &quot;exellent&quot; elif x&lt;90: return &quot;failed&quot; else: return &quot;pass&quot; In [483]: 12df[&quot;phpx&quot;]= df[&quot;php&quot;].map(map_score)df Out[483]: python java php phpx peppa 60 1 102 pass mery 32 100 95 pass tom 38 11 60 failed jack 4 15 146 exellent rose 7 74 49 failed 3) rename()函数：替换索引对DataFrame的索引名进行更改 仍然是新建一个字典 In [485]: 12score = pd.concat((df,df),keys=[&apos;A&apos;,&apos;B&apos;],axis=1)score Out[485]: A B python java php python java php peppa 18 57 95 18 57 95 mery 29 4 142 29 4 142 tom 102 138 59 102 138 59 jack 138 130 79 138 130 79 rose 68 137 69 68 137 69 In [488]: 12map_dic = &#123;&apos;peppa&apos;:&apos;帅气&apos;,&apos;mery&apos;:&apos;美丽&apos;,&apos;python&apos;:&apos;蟒蛇&apos;, &apos;java&apos;:&apos;咖啡&apos;,&apos;php&apos;:&apos;拍黄片&apos;,&apos;A&apos;:&apos;上&apos;,&apos;B&apos;:&apos;下&apos;&#125; In [489]: 1score.rename(map_dic) # 默认是替换 行的名称 Out[489]: A B python java php python java php 帅气 18 57 95 18 57 95 美丽 29 4 142 29 4 142 tom 102 138 59 102 138 59 jack 138 130 79 138 130 79 rose 68 137 69 68 137 69 In [493]: 1234score.rename(columns=map_dic) # 指定columns可以对列名称进行替换score.rename(columns=map_dic,level=0) # 通过level参数 可以指定具体对哪一层级进行替换score.rename(columns=map_dic,level=1) # 0 是最外层 score.rename(columns=map_dic,level=-1) Out[493]: A B 蟒蛇 咖啡 拍黄片 蟒蛇 咖啡 拍黄片 peppa 18 57 95 18 57 95 mery 29 4 142 29 4 142 tom 102 138 59 102 138 59 jack 138 130 79 138 130 79 rose 68 137 69 68 137 69 使用rename()函数替换行索引 index 替换行索引 columns 替换列索引 level 指定多维索引的维度 3. 使用聚合操作对数据异常值检测和过滤使用 df.describe() 函数查看每一列的描述性统计量 In [509]: 1234# 别删data = np.random.randn(1000,5)df = DataFrame(data)df In [497]: 1df.describe() 使用std()函数可以求得DataFrame对象每一列的标准差 In [498]: 1df.std() . . . 根据每一列或行的标准差，对DataFrame元素进行过滤。 借助any()或all()函数, 测试是否有True，有一个或以上返回True，反之返回False 对每一列应用筛选条件,去除标准差太大的数据 In [510]: 1234567# 寻找异常数据 太大的 或者 太小的df.mean() # 各个列的平均值 是一个Seriesdf - df.mean() # DataFrame - Series DataFrame中的每一行都和Series做减法 对应的列相减# df - df.mean() &gt; 3*df.std()# (df - df.mean() &gt; 3*df.std()).any()# (df - df.mean() &gt; 3*df.std()).any(axis=1)# df[(df - df.mean() &gt; 3*df.std()).any(axis=1)] #找到异常的行 Out[510]: 0 1 2 3 4 2 1.031163 3.342800 -0.951155 0.879417 0.775101 27 0.293161 0.996596 -0.921322 1.026759 3.125230 89 -0.574413 3.278781 0.927381 0.785391 -0.202599 448 -0.063992 3.065781 0.527608 -1.437081 -1.338915 718 -0.721761 -1.553252 3.376908 1.616187 0.484057 720 0.169187 1.189160 0.950916 0.484301 3.434112 739 3.083713 -0.795726 -1.669864 -1.737600 -0.620702 949 -0.546860 3.082299 0.196674 0.324997 0.096944 971 3.127690 1.149779 1.222424 -0.628777 -0.024324 988 4.398187 0.095110 -0.321007 0.378016 1.166681 删除特定索引df.drop(labels,inplace = True) In [513]: 1drop_idx = df[(df - df.mean() &gt; 3*df.std()).any(axis=1)].index In [516]: 1df.drop(drop_idx).shape Out[516]: 1(990, 5) In [515]: 1df.shape Out[515]: 1(1000, 5) Out[366]: 1(1000, 5) Out[368]: 1(997, 5) Out[358]: 1(993, 5) In [165]: 1# 异常数据对于 ML模型训练的危害 ============================================ 练习21： 1新建一个形状为10000*3的标准正态分布的DataFrame(np.random.randn)，去除掉所有满足以下情况的行：其中任一元素绝对值大于3倍标准差 ============================================ 4. 排序使用.take()函数排序12- take()函数接受一个索引列表，用数字表示- eg:df.take([1,3,4,2,5]) 可以借助np.random.permutation()函数随机排序 In [517]: 123456# 别删data = np.random.randint(0,100,size=(5,5))index = list(&apos;ABCDE&apos;)columns = list(&apos;甲乙丙丁戊&apos;)df = DataFrame(data=data,index=index,columns=columns)df Out[517]: 甲 乙 丙 丁 戊 A 27 11 28 69 12 B 46 15 31 19 28 C 22 76 3 17 98 D 28 91 73 72 65 E 18 46 22 40 64 In [521]: 12df.take([3,2,1]) # 按照索引去取行 顺序随意 还可以重复 还可以不完全df.take([3,3,3,3]) Out[521]: 甲 乙 丙 丁 戊 D 28 91 73 72 65 D 28 91 73 72 65 D 28 91 73 72 65 D 28 91 73 72 65 In [523]: 12np.random.permutation(2)np.random.permutation(5) Out[523]: 1array([4, 2, 3, 0, 1]) In [533]: 1df.take(np.random.permutation(5)) # 随机排序 （行不会少 也不会重复 只是顺序随机变换） Out[533]: 甲 乙 丙 丁 戊 D 28 91 73 72 65 B 46 15 31 19 28 A 27 11 28 69 12 E 18 46 22 40 64 C 22 76 3 17 98 随机抽样当DataFrame规模足够大时，直接使用np.random.randint()函数，就配合take()函数实现随机抽样 In [538]: 1np.random.randint(0,5,size=2) Out[538]: 1array([2, 1]) In [545]: 1df.take(np.random.randint(0,5,size=2)) # 随机抽样 Out[545]: 甲 乙 丙 丁 戊 D 28 91 73 72 65 C 22 76 3 17 98 ============================================ 练习22： 假设有张三李四王老五的期中考试成绩ddd2，对着三名同学随机排序 ============================================ 5. 数据分类处理【重点】数据聚合是数据处理的最后一步，通常是要使每一个数组生成一个单一的数值。 数据分类处理： 分组：先把数据分为几组 用函数处理：为不同组的数据应用不同的函数以转换数据 合并：把不同组得到的结果合并起来 数据分类处理的核心： 12- groupby()函数- groups属性查看分组情况 In [547]: 1# 示例数据 不要删！！！ 12345df = DataFrame(&#123;&apos;item&apos;:[&apos;苹果&apos;,&apos;香蕉&apos;,&apos;橘子&apos;,&apos;香蕉&apos;,&apos;橘子&apos;,&apos;苹果&apos;,&apos;苹果&apos;], &apos;price&apos;:[4,3,3,2.5,4,2,2.8], &apos;color&apos;:[&apos;red&apos;,&apos;yellow&apos;,&apos;yellow&apos;,&apos;green&apos;,&apos;green&apos;,&apos;green&apos;,&apos;yello&apos;], &apos;weight&apos;:[12,20,50,30,20,44,37]&#125;)df Out[547]: item price color weight 0 苹果 4.0 red 12 1 香蕉 3.0 yellow 20 2 橘子 3.0 yellow 50 3 香蕉 2.5 green 30 4 橘子 4.0 green 20 5 苹果 2.0 green 44 6 苹果 2.8 yello 37 根据item分组,通过groups属性查看结果 In [549]: 1df.groupby(&quot;item&quot;).groups Out[549]: 123&#123;&apos;橘子&apos;: Int64Index([2, 4], dtype=&apos;int64&apos;), &apos;苹果&apos;: Int64Index([0, 5, 6], dtype=&apos;int64&apos;), &apos;香蕉&apos;: Int64Index([1, 3], dtype=&apos;int64&apos;)&#125; 获取weight的总和 In [552]: 1df Out[552]: item price color weight 0 苹果 4.0 red 12 1 香蕉 3.0 yellow 20 2 橘子 3.0 yellow 50 3 香蕉 2.5 green 30 4 橘子 4.0 green 20 5 苹果 2.0 green 44 6 苹果 2.8 yello 37 In [553]: 1df.groupby(&quot;item&quot;)[&quot;weight&quot;].sum() #各类水果的总重量 Out[553]: 12345item橘子 70苹果 93香蕉 50Name: weight, dtype: int64 把总和跟df进行merge合并 In [555]: 12df2 = DataFrame(df.groupby(&quot;item&quot;)[&quot;weight&quot;].sum())df2 Out[555]: weight item 橘子 70 苹果 93 香蕉 50 In [556]: 1df Out[556]: item price color weight 0 苹果 4.0 red 12 1 香蕉 3.0 yellow 20 2 橘子 3.0 yellow 50 3 香蕉 2.5 green 30 4 橘子 4.0 green 20 5 苹果 2.0 green 44 6 苹果 2.8 yello 37 In [559]: 1pd.merge(df,df2,on=&quot;item&quot;,how=&quot;outer&quot;,suffixes=[]) Out[559]: item price color weight_x weight_y 0 苹果 4.0 red 12 93 1 苹果 2.0 green 44 93 2 苹果 2.8 yello 37 93 3 香蕉 3.0 yellow 20 50 4 香蕉 2.5 green 30 50 5 橘子 3.0 yellow 50 70 6 橘子 4.0 green 20 70]]></content>
  </entry>
  <entry>
    <title><![CDATA[Django创建项目、配置]]></title>
    <url>%2Funcategorized%2FDjango%2F</url>
    <content type="text"><![CDATA[一、框架介绍 Django(Python Web 框架)是一个开放源代码的Web应用框架，由Python写成。采用了MTV的框架模式，即模型M，模板T和视图V。它的主要目的是简便、快速的开发数据库驱动的网站。 二、创建Djiango项目①命令行创建项目1.创建文件夹并切换目录 12mkdir hello_djangocd hello_django 2.创建虚拟环境 1python -m venv hello_django_venv 3.激活虚拟环境 1234cd hello_django_venvcd Scriptsactivatelinux：source bin/activate 4.在虚拟环境下安装Django框架 1pip install django 6.在用户目录下创建项目 1django-admin startproject hello_django 7.创建应用 1python manage.py startapp hrs 8.启动服务 1python manage.py runserver ②Pycharm 创建Django项目1.设置好项目名和应用名后Create创建 三、配置Django项目1.setting.py添加项目应用’cart.apps.CartConfig’ 12345678910111213&gt; # Application definition&gt; #添加cart应用&gt;&gt; INSTALLED_APPS = [&gt; &apos;django.contrib.admin&apos;,&gt; &apos;django.contrib.auth&apos;,&gt; &apos;django.contrib.contenttypes&apos;,&gt; &apos;django.contrib.sessions&apos;,&gt; &apos;django.contrib.messages&apos;,&gt; &apos;django.contrib.staticfiles&apos;,&gt; &apos;cart.apps.CartConfig&apos;,&gt; ]&gt; 2.创建数据库并在setting.py做如下配置： 123456789101112&gt; # Database&gt;&gt; DATABASES = &#123;&gt; &apos;default&apos;: &#123;&gt; &apos;ENGINE&apos;: &apos;django.db.backends.mysql&apos;,&gt; &apos;NAME&apos;: &apos;shop&apos;,&gt; &apos;HOST&apos;:&apos;localhost&apos;,&gt; &apos;PORT&apos;:&apos;3306&apos;,&gt; &apos;USER&apos;:&apos;root&apos;,&gt; &apos;PASSWORD&apos;:&apos;123456&apos;,&gt; &#125;&gt; 项目shop下__init__.py做如下配置： 1234&gt; import pymysql&gt;&gt; pymysql.install_as_MySQLdb()&gt; 3.创建模型：models.py 123456789101112131415&gt; from django.db import models&gt;&gt; class Goods(models.Model):&gt; &apos;&apos;&apos;商品模型类&apos;&apos;&apos;&gt;&gt; id = models.AutoField(primary_key=True,db_column=&apos;gid&apos;)&gt; name = models.CharField(max_length=50,db_column=&apos;gname&apos;)&gt; price = models.DecimalField(max_digits=10,decimal_places=2,db_column=&apos;gprice&apos;)&gt; image = models.CharField(max_length=255,db_column=&apos;gimage&apos;)&gt;&gt; class Meta:&gt; &gt; db_table = &apos;tb_goods&apos;&gt; ordering = (&apos;id&apos;,)&gt; 4.数据迁移(虚拟环境下) 12$ python manage.py makemigrations hrs (生成迁移)$ python manage.py migrate (执行迁移) 5.配置管理员页面(admin.py) 12345678910111213&gt; from django.contrib import admin&gt;&gt; from cart.models import Goods&gt;&gt;&gt; class GoodsAdmin(admin.ModelAdmin):&gt; #添加管理员界面显示列&gt; list_display = (&apos;id&apos;,&apos;name&apos;,&apos;price&apos;,&apos;image&apos;)&gt; #指定搜索列&gt; search_fields = (&apos;name&apos;,)&gt;&gt; admin.site.register(Goods,GoodsAdmin)&gt; 6.创建管理员(虚拟环境) 1$ python manage.py createsuperuser 7.templates/static ​ templates(存放需要渲染的HTML页面) ​ static(存放：images/js/css) static需要在setting.py添加如下设置： 1234&gt; # Static files (CSS, JavaScript, Images)&gt;&gt; STATICFILES_DIRS = [os.path.join(BASE_DIR,&apos;static&apos;)]&gt; 如果使用命令行创建Django项目 还需要在setting.py中添加如下配置: ‘DIRS’: [os.path.join(BASE_DIR, ‘templates’)] 123456789101112131415161718&gt; TEMPLATES = [&gt; &#123;&gt; &apos;BACKEND&apos;: &apos;django.template.backends.django.DjangoTemplates&apos;,&gt; # 添加templates文件夹路径&gt; &apos;DIRS&apos;: [os.path.join(BASE_DIR, &apos;templates&apos;)]&gt; ,&gt; &apos;APP_DIRS&apos;: True,&gt; &apos;OPTIONS&apos;: &#123;&gt; &apos;context_processors&apos;: [&gt; &apos;django.template.context_processors.debug&apos;,&gt; &apos;django.template.context_processors.request&apos;,&gt; &apos;django.contrib.auth.context_processors.auth&apos;,&gt; &apos;django.contrib.messages.context_processors.messages&apos;,&gt; ],&gt; &#125;,&gt; &#125;,&gt; ]&gt; 8.还可根据需要做国际化设置： 123456&gt; #设置语言&gt; LANGUAGE_CODE = &apos;zh-hans&apos;&gt;&gt; #设置时区&gt; TIME_ZONE = &apos;Asia/Shanghai&apos;&gt;]]></content>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Firewalld]]></title>
    <url>%2Funcategorized%2Ffirewalld%2F</url>
    <content type="text"><![CDATA[firewalld使用简介1.firewalld简介firewalld是centos7的一大特性，最大的好处有两个：支持动态更新，不用重启服务；第二个就是加入了防火墙的“zone”概念.firewalld有图形界面和工具界面，由于我在服务器上使用，图形界面请参照官方文档，本文以字符界面做介绍firewalld的字符界面管理工具是: firewall-cmd .firewalld默认配置文件有两个：/usr/lib/firewalld/ （系统配置）和 /etc/firewalld/ （用户配置地址）. 2.firewalld安装root执行 1$ yum install firewalld firewall-config 3.运行/停止/禁用 firewalld启动： 1# systemctl start firewalld 查看状态： 1# systemctl status firewalld 1# firewall-cmd --state 停止： 1# systemctl disable firewalld 禁用： 1# systemctl stop firewalld 4.配置firewalld查看版本： 1# firewall-cmd --version 查看帮助： 1# firewall-cmd --help 显示状态： 1# firewall-cmd --state 更新防火墙规则： 12# firewall-cmd --reload# firewall-cmd --complete-reload 两者的区别就是第一个无需断开连接，就是firewalld特性之一动态添加规则，第二个需要断开连接，类似重启服务 将接口添加到区域，默认接口都在public 1# firewall-cmd --zone=public --add-interface=eth0 永久生效再加上 –permanent 然后reload防火墙 设置默认接口区域 1# firewall-cmd --set-default-zone=public 立即生效无需重启 打开端口（貌似这个才最常用） 查看所有打开的端口： 1# firewall-cmd --zone=dmz --list-ports 加入一个端口到区域： 1# firewall-cmd --zone=dmz --add-port=8080/tcp 若要永久生效方法同上 打开一个服务，类似于将端口可视化，服务需要在配置文件中添加，/etc/firewalld 目录下有services文件夹 1# firewall-cmd --zone=work --add-service=smtp 移除服务 1# firewall-cmd --zone=work --remove-service=smtp]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>%2Funcategorized%2FRedis%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[非关系型数据库(redis)12345关系型数据库(锁) - 数据价值高，强一致性Redis - 高速缓存 - 键值对数据库MongoDB - 结构灵活价值不高 - 文档数据库Neo4j - 社交网站 - 图数据库HBase - 列族数据库 ###配置Redis 123line61 bind:（命令模式下：!ifconfig）line 84 port:修改默认端口line 480 requirepass:(修改密码：命令模式下：/requirepass搜索) 启动redis12345678配置文件后台运行:# redis-server 配置文件 &amp;查看进程：# ps -ef/aux | grep redis连接测试：# redis-benchmark -h 172.17.133.209 -p 6937 -a 110112113连接：[root@yangliang ~]# redis-cli -h 172.17.133.209 -p 6937 -a 110112113172.17.133.209:6937&gt; auth 110112113OK172.17.133.209:6937&gt; pingPONG]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2Funcategorized%2FMySQL%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[MySQL为什么要使用数据库？123数据持久化 - 将数据从一掉电数据就丢失的存储介质(内存)转移到持久存储介质(硬盘)普通文件 / 二进制文件 / Excel数据库 - 高效的存储和管理数据方便的检索数据 什么是关系型数据库？1234567理论基础 - 集合论和关系代数用二维表组织数据表 - 实体行 - 记录列 - 字段表(实体)与表(实体)之间存在关系编程语言 - SQL - 结构化查询语言 数据库、数据库系统、数据库管理系统？Database - DB - 数据的仓库(集散地)DBS - 包括了DB、DBMS、DBA(数据库管理员)(R)DBMS - (关系型)数据库管理系统 - 管理数据库的软件 MySQL - 体积小 功能完备 Oracle - 安全强大 商业智能 昂贵 DB2 - 安全强大 商业智能 昂贵 SQL Server - 微软平台 SQLite - 嵌入式数据库(移动端) MySQL客户端工具 SQLyog Toad for MySQL Navicat for MySQL 1234567891011121314151617181920212223242526272829303132333435363738394041-- SQL(Structured Query Language)-- 关系型数据库的编程语言-- DDL(数据定义语言): create(创建) / drop(删除) / alter(修改)-- DML(数据操纵语言): insert(插入) / delete(删除) / update(更新) -- DQL(数据查询语言): select-- DCL(数据控制语言): grant / revoke / begin / commit / rollback-- 如果指定的数据库存在则删除该数据库drop database if exists school;-- 创建数据库并指定默认的字符集create database school default charset utf8;-- 切换到school数据库use school;-- 关系型数据库通过二维表来组织数据-- 删除学生表drop table if exists tb_student;-- 创建学生表-- 主键(primary key) - 能够标识唯一一条记录的列create table tb_student(stuid int not null comment &apos;学号&apos;,sname varchar(10) not null comment &apos;姓名&apos;,ssex bit default 1 comment &apos;性别&apos;,stel char(11) comment &apos;联系电话&apos;,sbirth date comment &apos;出生日期&apos;,primary key (stuid));-- 修改学生表alter table tb_student add column saddr varchar(100);alter table tb_student drop column stel;-- 插入学生记录insert into tb_student values (1001, &apos;王大锤&apos;, 1, &apos;1990-2-12&apos;, &apos;四川成都&apos;);insert into tb_student (stuid, sname) values (1002, &apos;骆昊&apos;);insert into tb_student (stuid, sname, ssex) values (1003, &apos;李飘飘&apos;, 0);insert into tb_student values (1004, &apos;张三丰&apos;, 1, &apos;1940-12-3&apos;, &apos;湖北武汉&apos;),(1005, &apos;黄蓉&apos;, 0, &apos;1975-3-25&apos;, &apos;山东东营&apos;),(1006, &apos;杨过&apos;, 1, &apos;1987-1-19&apos;, &apos;湖南长沙&apos;); 事务的特点是什么？12345ACID特性：1.原子性（Atomicity）:不可分割，要么全成功要么全失败2.一致性（Consistency）:事务前后数据状态要保持一致3.隔离性（Isolation）:多个事务不能看到彼此的中间状态（提交或回滚之前的状态）4.持久性（Duration）:事务完成后数据要持久化（事务的影响要反映在物理存储上）]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2Funcategorized%2FGit%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[Git本地建仓库再托管到远端服务器mkdir hello cd hello git init git add .git statusgit commit -m ‘xyz’ git loggit reset –hard idgit refloggit remote add origin git push -u origin mastergit pull 远端服务器项目已经存在git clone cd hellogit add .git checkout –git commit -m ‘abc’git push origin mastergit pull #Git日常工作流程 git clone cd git branch git checkout git add .git commit -m ‘xyz’git push origin git checkout mastergit merge git push origin master]]></content>
  </entry>
</search>
